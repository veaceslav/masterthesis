% Chapter Template

\chapter{Implementation Details} % Main chapter title

\label{Chapter5} % Change X to a consecutive number; for referencing this chapter elsewhere, use \ref{ChapterX}

\lhead{Chapter 5. \emph{Implementation Details}} % Change X to a consecutive number; this is for the header on each page - perhaps a shortened title

%----------------------------------------------------------------------------------------
%	SECTION 1
%----------------------------------------------------------------------------------------

\section{Swan Application Layout}
In the process of implementing the support for SWAN WEAR and Beacon Based Sensor, SWAN application layout has changed dramatically.
We will cover the following main changes operated to SWAN project structure during the last 6 months:
\begin{itemize}
 \item Merging multiple SWAN repositories
 \item Splitting the SWAN project sources in libraries
 \item Uploading the SWAN JARS in publicly available repository - Jcenter
\end{itemize}

Each of this changes had a big impact on SWAN and could bring unexpected bugs.


\subsection{Merging multiple SWAN repositories}
At the beginning of the master thesis project, the main repository of SWAN has holding the stable version of it, which was being used in production 
by a the company. Our SWAN project has a big team, each member work on different part of the SWAN or SWAN related functionality.
To avoid any breaking changes to the current SWAN version, I decided to make a different branch and put all my smartwatch related changes in it.
When I was done with implementing the first prototype of SWAN WEAR sensors, other phD students's projects: SWAN Plus and IoT SWAN were also ready.
Unfortunately, the commits of the projects stated above were in different repositories so merging them into master branch was proven to be difficult.
We followed this procedure when merging the SWAN:
\begin{itemize}
 \item Create the release branch with the old, stable SWAN
 \item Create development branches for SWAN Plus and IoT SWAN
 \item Export commits from SWAN Plus and IoT SWAN as patches
 \item Apply the patches to each development branch
 \item Merge Smartwatch code into Master
 \item Merge SWAN Plus into master and resolve conflicts
 \item Merge IoT SWAN into master and resolve conflicts
\end{itemize}

The most challenging part was to apply patches from the two different repositories. Merging commits[cite them] were the reason why some history was 
lost, and patches were hard to apply. This also proves why you should always use the rebase[cite them] option instead of merging option when you push commits
to the remote

\subsection{Splitting SWAN sources into libraries}
After the implementation of the smartwatch sensors and beacon sensors, as part of research topic, SWAN had to be ported on smartwatch.
There were multiple options of how I was supposed to handle the challenge:
\begin{itemize}
 \item Clone all SWAN code and adapt it for the smartwatch
 \item Extract all common code and make it a library
\end{itemize}

I choose the second option, since it will avoid duplicate code and will allow easier maintenance in the future. As a starting point, I decided to see if The Evaluation Engine
code can be extracted and called from a library. The dependencies were extensive. The Evaluation Engine was depending on:
\begin{itemize}
 \item Swan Interface code - Classes that applications need to communicate with SWAN
 \item Swan Song Implementation - Parser and Data structure implementation for SWAN Expression
 \item Sensor Interfaces - used to implement new sensors in SWAN
 \item Beacon Implementation
 \item Proximity Implementation (SWAN Plus)
\end{itemize}

The first three components were separated from the SWAN Phone application and added to the swan core. Unfortunately, the dependency on the last two items
was still present and it had to be removed from the code, since the implementation was relevant only for phone and not for the smartwatch.
To preserve the functionality, all the methods depending on Proximity Manager and Beacon Discovery were replaced with empty bodies and the Evaluation Engine on
the phone was sub-classing the Evaluation Engine in the library and implementing the missing functionality.
The same design was applied to Abstract SWAN Sensor who was relying on Sense Android Library to offload values[cite].

After \textbf{Swan Core} was made independent, we decided to extract \textbf{Swan Song} and \textbf{Swan Interface} from it and make them separate libraries.
The main reason for this library separation was the way applications interact with SWAN. Swan Interface are often imported as a separate jar in any application that want to register a 
SWAN expression. To improve the distribution of the Swan Interface, we decided to make it available on Android Main Repository - JCenter [cite]. Uploading the Jars required us to follow this tutorial:
[cite] https://inthecheesefactory.com/blog/how-to-upload-library-to-jcenter-maven-central-as-dependency/en

Because we are maintaining the packages on JCenter now, the old packages and package building scripts  in the repository were discarded.
The JCenter  is not storing the packages in JAR format, but in the new format made to accommodate the Android Resources: AAR [cite]. 
The new package format can be built and uploaded directly from Android Studio. Also, when changes are being operated on Swan Interface, 
the library versions should be updated accordingly:

\begin{itemize}
 \item If any change or addition  in the library was made, increment the patch version number : 1.0.0 $\rightarrow$1.0.1
 \item If any public class or Enumeration was deleted, increment the minor version: 1.0.0 $\rightarrow$ 1.1.0 
 \item The major version should be only incremented with SWAN major version: 1.0.0 $\rightarrow$ 2.0.0
\end{itemize}

More information about how to manage and upload swan libraries is available on SWAN wiki on Github[cite]

\section{Beacon based Bluetooth Sensors}

Bluetooth sensors allow us to get proximity data from the nearby beacons. Beacon sensor integration into SWAN expression based approach was not seamless.
The new data specifications which include beacon extension are discussed in \hyperref[Chapter3]{Chapter 3}.

The beacon implementation was divided into multiple steps:
\begin{itemize}
 \item Implement Bluetooth Low Energy Scan
 \item Add support for existing Beacon Formats
 \item Implement Bluetooth Beacon Discovery
 \item Implement Bluetooth Based Sensors
\end{itemize}





\section{Value based SmartWatch Sensors}

\section{SWAN based Sensors for SmartWatch}

